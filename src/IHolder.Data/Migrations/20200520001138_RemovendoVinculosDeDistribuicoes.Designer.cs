// <auto-generated />
using System;
using IHolder.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IHolder.Data.Migrations
{
    [DbContext(typeof(IHolderContext))]
    [Migration("20200520001138_RemovendoVinculosDeDistribuicoes")]
    partial class RemovendoVinculosDeDistribuicoes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IHolder.Domain.Entities.Aporte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtivoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataAporte")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("PrecoMedio")
                        .HasColumnType("DECIMAL(12,2)");

                    b.Property<decimal>("PrecoTotal")
                        .HasColumnType("DECIMAL(12,2)");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("DECIMAL(12,2)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AtivoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Aporte");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.Ativo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cotacao")
                        .HasColumnType("DECIMAL(12,2)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Risco")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ativo");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.DistribuicaoPorAtivo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtivoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("DATETIME");

                    b.Property<byte>("Orientacao")
                        .HasColumnType("TINYINT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AtivoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("DistribuicaoPorAtivo");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.DistribuicaoPorProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("DATETIME");

                    b.Property<byte>("Orientacao")
                        .HasColumnType("TINYINT");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("DistribuicaoPorProduto");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.DistribuicaoPorTipoInvestimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("DATETIME");

                    b.Property<byte>("Orientacao")
                        .HasColumnType("TINYINT");

                    b.Property<Guid>("TipoInvestimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TipoInvestimentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("DistribuicaoPorTipoInvestimento");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TipoInvestimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TipoInvestimentoId");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.SituacaoPorAtivo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtivoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Observacao")
                        .HasColumnType("VARCHAR(240)");

                    b.Property<byte>("Situacao")
                        .HasColumnType("TINYINT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AtivoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SituacaoPorAtivo");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.TipoInvestimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Risco")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.ToTable("TipoInvestimento");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.Property<byte>("Genero")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("Senha")
                        .HasColumnType("VARCHAR(240)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("IHolder.Domain.Entities.Aporte", b =>
                {
                    b.HasOne("IHolder.Domain.Entities.Ativo", "Ativo")
                        .WithMany("Aportes")
                        .HasForeignKey("AtivoId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Aportes")
                        .HasForeignKey("UsuarioId")
                        .IsRequired();
                });

            modelBuilder.Entity("IHolder.Domain.Entities.Ativo", b =>
                {
                    b.HasOne("IHolder.Domain.Entities.Produto", "Produto")
                        .WithMany("Ativos")
                        .HasForeignKey("ProdutoId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Ativos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired();

                    b.OwnsOne("IHolder.Domain.ValueObjects.Informacoes", "Informacoes", b1 =>
                        {
                            b1.Property<Guid>("AtivoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Caracteristicas")
                                .IsRequired()
                                .HasColumnName("Caracteristicas")
                                .HasColumnType("VARCHAR(240)");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasColumnName("Descricao")
                                .HasColumnType("VARCHAR(30)");

                            b1.HasKey("AtivoId");

                            b1.ToTable("Ativo");

                            b1.WithOwner()
                                .HasForeignKey("AtivoId");
                        });
                });

            modelBuilder.Entity("IHolder.Domain.Entities.DistribuicaoPorAtivo", b =>
                {
                    b.HasOne("IHolder.Domain.Entities.Ativo", "Ativo")
                        .WithMany("DistribuicoesPorAtivos")
                        .HasForeignKey("AtivoId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Entities.Usuario", "Usuario")
                        .WithMany("DistribuicoesPorAtivos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired();

                    b.OwnsOne("IHolder.Domain.ValueObjects.Valores", "Valores", b1 =>
                        {
                            b1.Property<Guid>("DistribuicaoPorAtivoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("PercentualAtual")
                                .HasColumnName("PercentualAtual")
                                .HasColumnType("DECIMAL(12,2)");

                            b1.Property<decimal>("PercentualDiferenca")
                                .HasColumnName("PercentualDiferenca")
                                .HasColumnType("DECIMAL(12,2)");

                            b1.Property<decimal>("PercentualObjetivo")
                                .HasColumnName("PercentualObjetivo")
                                .HasColumnType("DECIMAL(12,2)");

                            b1.Property<decimal>("ValorAtual")
                                .HasColumnName("ValorAtual")
                                .HasColumnType("DECIMAL(12,2)");

                            b1.Property<decimal>("ValorDiferenca")
                                .HasColumnName("ValorDiferenca")
                                .HasColumnType("DECIMAL(12,2)");

                            b1.HasKey("DistribuicaoPorAtivoId");

                            b1.ToTable("DistribuicaoPorAtivo");

                            b1.WithOwner()
                                .HasForeignKey("DistribuicaoPorAtivoId");
                        });
                });

            modelBuilder.Entity("IHolder.Domain.Entities.DistribuicaoPorProduto", b =>
                {
                    b.HasOne("IHolder.Domain.Entities.Produto", "Produto")
                        .WithMany("DistribuicoesPorProdutos")
                        .HasForeignKey("ProdutoId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Entities.Usuario", "Usuario")
                        .WithMany("DistribuicoesPorProdutos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired();

                    b.OwnsOne("IHolder.Domain.ValueObjects.Valores", "Valores", b1 =>
                        {
                            b1.Property<Guid>("DistribuicaoPorProdutoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("PercentualAtual")
                                .HasColumnName("PercentualAtual")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("PercentualDiferenca")
                                .HasColumnName("PercentualDiferenca")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("PercentualObjetivo")
                                .HasColumnName("PercentualObjetivo")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("ValorAtual")
                                .HasColumnName("ValorAtual")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("ValorDiferenca")
                                .HasColumnName("ValorDiferenca")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("DistribuicaoPorProdutoId");

                            b1.ToTable("DistribuicaoPorProduto");

                            b1.WithOwner()
                                .HasForeignKey("DistribuicaoPorProdutoId");
                        });
                });

            modelBuilder.Entity("IHolder.Domain.Entities.DistribuicaoPorTipoInvestimento", b =>
                {
                    b.HasOne("IHolder.Domain.Entities.TipoInvestimento", "TipoInvestimento")
                        .WithMany("DistribuicoesPorTiposInvestimentos")
                        .HasForeignKey("TipoInvestimentoId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Entities.Usuario", "Usuario")
                        .WithMany("DistribuicoesPorTiposInvestimentos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired();

                    b.OwnsOne("IHolder.Domain.ValueObjects.Valores", "Valores", b1 =>
                        {
                            b1.Property<Guid>("DistribuicaoPorTipoInvestimentoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("PercentualAtual")
                                .HasColumnName("PercentualAtual")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("PercentualDiferenca")
                                .HasColumnName("PercentualDiferenca")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("PercentualObjetivo")
                                .HasColumnName("PercentualObjetivo")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("ValorAtual")
                                .HasColumnName("ValorAtual")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("ValorDiferenca")
                                .HasColumnName("ValorDiferenca")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("DistribuicaoPorTipoInvestimentoId");

                            b1.ToTable("DistribuicaoPorTipoInvestimento");

                            b1.WithOwner()
                                .HasForeignKey("DistribuicaoPorTipoInvestimentoId");
                        });
                });

            modelBuilder.Entity("IHolder.Domain.Entities.Produto", b =>
                {
                    b.HasOne("IHolder.Domain.Entities.TipoInvestimento", "TipoInvestimento")
                        .WithMany("Produtos")
                        .HasForeignKey("TipoInvestimentoId")
                        .IsRequired();

                    b.OwnsOne("IHolder.Domain.ValueObjects.Informacoes", "Informacoes", b1 =>
                        {
                            b1.Property<Guid>("ProdutoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Caracteristicas")
                                .IsRequired()
                                .HasColumnName("Caracteristicas")
                                .HasColumnType("VARCHAR(240)");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasColumnName("Descricao")
                                .HasColumnType("VARCHAR(30)");

                            b1.HasKey("ProdutoId");

                            b1.ToTable("Produto");

                            b1.WithOwner()
                                .HasForeignKey("ProdutoId");
                        });
                });

            modelBuilder.Entity("IHolder.Domain.Entities.SituacaoPorAtivo", b =>
                {
                    b.HasOne("IHolder.Domain.Entities.Ativo", "Ativo")
                        .WithMany("SituacoesPorAtivos")
                        .HasForeignKey("AtivoId")
                        .IsRequired();

                    b.HasOne("IHolder.Domain.Entities.Usuario", "Usuario")
                        .WithMany("SituacoesPorAtivos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired();
                });

            modelBuilder.Entity("IHolder.Domain.Entities.TipoInvestimento", b =>
                {
                    b.OwnsOne("IHolder.Domain.ValueObjects.Informacoes", "Informacoes", b1 =>
                        {
                            b1.Property<Guid>("TipoInvestimentoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Caracteristicas")
                                .IsRequired()
                                .HasColumnName("Caracteristicas")
                                .HasColumnType("VARCHAR(240)");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasColumnName("Descricao")
                                .HasColumnType("VARCHAR(30)");

                            b1.HasKey("TipoInvestimentoId");

                            b1.ToTable("TipoInvestimento");

                            b1.WithOwner()
                                .HasForeignKey("TipoInvestimentoId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
